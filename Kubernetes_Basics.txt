LAB 3: Kubernetes Basics v1.6

Overview:
In this lab,you learn how to;
~Provision a kubernetes cluster using Google Kubernetes Engine
~Deploy and manage docker containers using kubectl
~Split an application into microservers using Kubernetes Deployment and Services

You use Kubernetes Engine and its Kubernetes API to deploy, manage, and upgrade applications. You use an example application called "app" to complete the labs.

##STEPS:
1. Make sure the following APIs are enabled in Cloud Platform Console
	~Kubernetes Engine API
	~Container Registry API
	
	gcloud projects list
	gcloud config set projects qwiklabs-gcp-02-0bcf83936a54
	gcloud services list --available
	gcloud services enable Kubernetes Engine API
	gcloud services enable Container Registry API

2. Activate Google Cloud Shell
	You list the active account name with this command:
		gcloud auth list
	#Output"
	Credentialed accounts:
		-  student-02-f785b98be2cb@qwiklabs.net
	You can list the project ID with this command:
		gcloud config list project
	#Output
	[core]
	project = qwiklabs-gcp-02-0bcf83936a54

3. Get the sample code from the Git repository.
	git clone https://github.com/googlecodelabs/orchestrate-with-kubernetes.git

   Review the app layout.
	cd orchestrate-with-kubernetes/kubernetes
	
	ls

A Quick Demo Of Kubernetes
Start a Kubernetes Cluster

#Step 1:
~Define your zone as a project default zone. This way you do not need to specify --zone parameter in gcloud commands:
	gcloud config set compute/zone us-central1-a

~In Cloud Shell, run the following command to start a Kubernetes cluster called bootcamp that runs 5 nodes:
	gcloud container clusters create bootcamp --num-nodes 5 --scopes "https://www.googleapis.com/auth/projecthosting,storage-rw"

   [The scopes argument provides access to project hosting and Google Cloud Storage APIs that you'll use later]

#Step 2:
~After creating the cluster, check your installed version of Kubernetes using the kubectl version command:
	kubectl version

   [The gcloud container clusters create command automatically authenticated kubectl for you]

#Step 3:
~Use kubectl cluster-info to find out more about the cluster:
	kubectl cluster-info

#Step 4:
~View your running nodes in Cloud Platform Console:
Open the Navigation menu and go to Compute Engine > VM Instances.

##Bash Completion(Optional)
Kubernetes comes with auto-completion. You can use the kubectl completion command and the built-in source command to set this up.

#steps:
1. Run the following command:
	source <(kubectl completion bash)

2. Press Tab to display a list of available commands:
	kubectl <TAB><TAB>

  You can complete a partial command:
	kubectl co<TAB><TAB>

##Run and Deploy a Container

1. Use kubectl create deployment to launch a single instance of the nginx container:
	kubectl create deployment nginx --image=nginx:1.10.0

2. Use the kubectl get pods command to view the pod running the nginx container:
	kubectl get pods

3. Use the kubectl expose command to expose the nginx container outside Kubernetes:
	kubectl expose deployment nginx --port 80 --type LoadBalancer

4. Use the kubectl get command to view the new service:
	kubectl get services
    [You'll see an external IP that you can use to test and contact the nginx container remotely]

5. Use the kubectl scale command to scale up the number of backend applications (pods) running on your service using:
	kubectl scale deployment nginx --replicas 3

6. Get the pods one more time to confirm that Kubernetes has updated the number of pods:
	kubectl get pods

7. Use the kubectl get services command again to confirm that your external IP address has not changed:
	kubectl get services

8. Use the external IP address with the curl command to test your demo application:
	curl http://<External IP>:80

   [Kubernetes supports an easy-to-use workflow out of the box using the kubectl run, expose, and scale commands.]

##Clean Up
Clean up by running the following commands:
	kubectl delete deployment nginx
	kubectl delete service nginx

###Pods
#Creating Pods
Step 1:Explore the built-in pod documentation using the kubectl explain command:
	kubectl explain pods

Step 2:Explore the monolith pod's configuration file:
	cat pods/monolith.yaml
    [The pod is made up of one container (called monolith). You pass a few arguments to the container when it starts up and open port 80 for HTTP traffic.]

Step 3:Use the kubectl explain command with the .spec option to view more information about API objects:
	kubectl explain pods.spec.containers

Step 4:Create the monolith pod using kubectl create:
	kubectl create -f pods/monolith.yaml

Step 5:Use the kubectl get pods command to list all pods running in the default namespace:
	kubectl get pods

Step 6:When the pod is running, use the kubectl describe command to get more information about the monolith pod:
	kubectl describe pods monolith

##Interacting With Pods
1. Click the + button in Cloud Shell to open a new terminal.
2. Run the following command to set up port-forwarding from a local port, 10080, to a pod port, 80 (where your container is listening).
	kubectl port-forward monolith 10080:80

3. To access your pod, return to the first terminal window and run the following curl command.
	curl http://127.0.0.1:10080
    [You get an "Hello"back from the container]
4. Check what happens when you hit a secure endpoint.
	curl http://127.0.0.1:10080/secure
     [You get an error]

5. Log in to get an auth token from monolith.
	curl -u user http://127.0.0.1:10080/login
     At the login prompt, enter the password as password to sign in.
6. Cloud Shell doesn't handle copying long strings well, so copy the token into an environment variable.
	TOKEN=$(curl http://127.0.0.1:10080/login -u user|jq -r '.token')
    [At the login prompt, enter the password as password to sign in]
7. Access the secure endpoint again, and this time include the auth token.
	curl -H "Authorization: Bearer $TOKEN" http://127.0.0.1:10080/secure
    [You should get a response back from your application letting you know it works again!]

8. Use the kubectl logs command to view logs for the monolith pod.
	kubectl logs monolith

9. Open another terminal and use the -f flag to get a stream of logs in real-time!
   To create the third terminal, click the + button in Cloud Shell and run the following command.
	kubectl logs -f monolith
10. Use curl in terminal 1 to interact with monolith. And you see logs update in terminal 3:
	curl http://127.0.0.1:10080
    {You can see the logs updating back in terminal 3.}

11. Use the kubectl exec command to run an interactive shell inside the monolith pod. This can be useful when you want to troubleshoot from within a container.
	kubectl exec monolith --stdin --tty -c monolith /bin/sh

12. Optional: In the shell, you can test external (outward facing) connectivity using the ping command.
	ping -c 3 google.com

13. Sign out of the shell.
	exit
14. To quit kubectl port-forward and kubectl logs in terminal 2 and 3, press Ctrl+C.

###Monitoring and Health Checks
#Creating Pods with Liveness and Readiness Probes
step 1: Explore the healthy-monolith pod configuration file.
	cat pods/healthy-monolith.yaml

step 2:Create the healthy-monolith pod using kubectl.
	kubectl create -f pods/healthy-monolith.yaml

step 3:Pods are not marked ready until the readiness probe returns an HTTP 200 response. Use the kubectl describe
 command to view details for the healthy-monolith pod.

	kubectl describe pod healthy-monolith

#Readiness Probes
step 1:Use the kubectl port-forward command in terminal 2 to forward a local port to the health port of the healthy-monolith pod.
	kubectl port-forward healthy-monolith 10081:81

step 2:Force the monolith container readiness probe to fail. Use the curl command in terminal 1 to toggle the
 readiness probe status. Note that this command does not show any output.

	curl http://127.0.0.1:10081/readiness/status

step 3:Get the status of the healthy-monolith pod using the kubectl get pods -w command.

	kubectl get pods healthy-monolith -w

step 4:Press Ctrl+C when there are 0/1 ready containers. Use the kubectl describe command to get more details about the failing readiness probe.

	kubectl describe pods healthy-monolith

step 5:Notice the events for the healthy-monolith pod report details about failing readiness probes.
       To force the monolith container readiness probe to pass, toggle the readiness probe status by using the curl command.

	curl http://127.0.0.1:10081/readiness/status

step 6:Wait about 15 seconds and get the status of the healthy-monolith pod using the kubectl get pods command.
	kubectl get pods healthy-monolith

step 7:Press Ctrl+C in terminal 2 to close the kubectl proxy (i.e port-forward) command.
	
#Liveness Probes
step 1:Use the kubectl port-forward command to forward a local port to the health port of the healthy-monolith pod in terminal 2.

	kubectl port-forward healthy-monolith 10081:81

step 2:To force the monolith container readiness probe to pass, toggle the readiness probe status by using the curl command in another terminal.

	curl http://127.0.0.1:10081/healthz/status

step 3:Get the status of the healthy-monolith pod using the kubectl get pods -w command.

	kubectl get pods healthy-monolith -w

step 4:When a liveness probe fails, the container is restarted. Once restarted, the healthy-monolith pod should return to a healthy state.
 Press Ctrl+C to exit that command when the pod restarts. Note the restart count.

step 5:Use the kubectl describe command to get more details about the failing liveness probe.
 You can see the related events for when the liveness probe failed and the pod was restarted.

	kubectl describe pods healthy-monolith

step 6:When you are finished, press Ctrl+C in terminal 2 to close the kubectl proxy command.

##Creating a Service
Before creating your services, create a secure pod with an nginx server called secure-monolith that can handle HTTPS traffic.

#steps
1. Create two volumes that the secure pod will use to bring in (or consume) data.
   The first volume of type secret stores TLS cert files for your nginx server.
   Return to terminal 1 and create the first volume using the following command:

	kubectl create secret generic tls-certs --from-file tls/
   [This uploads cert files from the local directory tls/ and stores them in a secret called tls-certs.]

   ~Create the second volume of type ConfigMap to hold nginx's configuration file.
	kubectl create configmap nginx-proxy-conf --from-file nginx/proxy.conf

   {This uploads the proxy.conf file to the cluster and calls the ConfigMap nginx-proxy-conf.}

2. Explore the proxy.conf file that nginx will use.

	cat nginx/proxy.conf
    {The file specifies that SSL is ON and specifies the location of cert files in the container file system.}
    {The files really exist in the secret volume, so you need to mount the volume to the container's file system.}

3. Explore the secure-monolith pod configuration file.

	cat pods/secure-monolith.yaml

4. Run the following command to create the secure-monolith pod with its configuration data.

	kubectl create -f pods/secure-monolith.yaml
     {Now that you have a secure pod, expose the secure-monolith pod externally using a Kubernetes service.}

5. Explore the monolith service configuration file.

	cat services/monolith.yaml

    The files contain:
	~The selector that finds and exposes pods with labels app=monolith and secure=enabled
	~targetPort and nodePort that forward external traffic from port 31000 to nginx on port 443.

6. Use the kubectl create command to create the monolith service from the monolith service configuration file.

	kubectl create -f services/monolith.yaml

7. Use the gcloud compute firewall-rules command to allow traffic to the monolith service on the exposed nodeport.

	gcloud compute instances list
     [Now that everything is set up, you should be able to test the secure-monolith service from outside the cluster without using port forwarding.]

8. Get an IP address for one of your nodes.

	gcloud compute instances list

9. Try to open the URL in your browser.

	https://<EXTERNAL_IP>:31000
   [That timed out or refused to connect. What's going wrong?]
   Use the following commands to answer the questions below.
   kubectl get services monolith
   kubectl describe services monolith

##Adding labels to pods
step 1:Determine that there are several pods running with the monolith label.

	kubectl get pods -l "app=monolith"

step 2:But what about app=monolith and secure=enabled?

	kubectl get pods -l "app=monolith,secure=enabled"

     [Notice that this label query does not print any results. You need to add the "secure=enabled" label to them.]
step 3:Use the kubectl label command to add the missing secure=enabled label to the secure-monolith pod.

	kubectl label pods secure-monolith 'secure=enabled'

step 4:Check to see that your labels are updated.

	kubectl get pods secure-monolith --show-labels

step 5:View the list of endpoints on the monolith service.

	kubectl get endpoints monolith

step 6:Test this by testing one of your nodes again.

	gcloud compute instances list | grep gke-

Open the following URL in your browser. You will need to click through the SSL warning because secure-monolith is using a self-signed certificat

	https://<EXTERNAL_IP>:31000
